" GENERAL {{{
set nocompatible
filetype on                          " try to detect filetypes
filetype plugin indent on    " enable loading indent file for filetype
" enable modeline
set modeline
" allow perdirectory rc-files
set exrc
set secure
" автообновление настроек
autocmd BufWritePost .vimrc.mine source ~/.vim/.vimrc.mine
" автообновление проектов
autocmd BufWritePost projects.vim source ~/.vim/projects.vim
"}}}

" VIM user interface {{{
" statusline по умолчанию
if &statusline == ''
	set statusline=%<%f\ %y\ %h%m%r%=%-14.(%l,%c%V%)\ %P
endif

" статус - 2 строка снизу
set laststatus=2

" Enable mouse usage (all modes)
set mouse=a
" меняем заголовок окна на titlestring
set title
set cursorline
" новое окно помещаем справа от текущего
set splitright

" SEARCH
" игнорируем case, если шаблон в нижнем регистре
set ignorecase
set smartcase
" ищем в процессе набора
set incsearch
" подсветка найденных соответствий
set hlsearch

set wildmenu wildmode=list:longest
set wildignore=*.o,.git,*.swp,*.swo,*~,*.pyc,*.json,*.js
"}}}

" COLORS {{{
syntax on                           " syntax highlighing
" тёмный фон
set bg=dark
silent! colorscheme solarized
let g:solarized_termtrans =1
" переключение background
if exists("togglebg")
	call togglebg#map("<F6>")
endif
" используем специальную палитру для solarized
set t_Co=16
"let g:solarized_termcolors=256
"Easy motion
let g:EasyMotion_do_shade = 0

"Подсвечиваем все что можно подсвечивать
let python_highlight_all = 1
"}}}

" FILES, BACKUPS, SAVING {{{
" keep a backup file
set backup
" бэкапы и swap-файлы храним во временной директории
set backupdir=~/.vim/backup/,/tmp
set directory=~/.vim/tmp/,/tmp
" сохраняем буферы между сессиями
set viminfo+=%
" нам нужно сохранить undo tree при переключении буферов
set hidden
" отсекаем неэкранированные пробелы на конце при сохранении
autocmd BufWritePre * :%s/\(\\\)\@<!\s\+$//e
"}}}

" LOCALIZATION {{{
" удобно при наборе русских текстов
set keymap=russian-jcukenwin
"проблема с бэкслешем ,
"set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\,,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>,./
if v:version>=703 || v:version == 702 && has("patch109")
	" нужна поддержка unicode langmap
	set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>
endif
" по умолчанию - латинская раскладка
set iminsert=0
" по умолчанию - латинская раскладка при поиске
set imsearch=0
"}}}

" TEXT EDITING {{{
set textwidth=0
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4 "4 пробела в табе
"Автоотступ
set autoindent
"Кодировки файлов
set fileencodings=utf-8,ascii,cp1251,koi8-r

"diff
set diffopt+=vertical

" для различения уровня отступов
set list listchars=tab:\ \ ,trail:·
"set list listchars=tab:»·,trail:·
""}}}

" FOLDING - сворачивание {{{
set foldcolumn=3
set fdm=indent
set fdn=2
set fml=15
set foldopen+=insert
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.  Protect against
" screwing up folding when switching between windows.
"autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
"autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
"}}}

" COMPLETION {{{
"Настройка omnicomletion для Python (а так же для js, html и css)
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
let g:SuperTabDefaultCompletionType = "context"
function! MyTagContext()
return "\<c-x>\<c-]>"
" no return will result in the evaluation of the next
" configured context
endfunction
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover',]
" omni-completion приоритетнее user-completion
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-]>",]
let g:SuperTabLongestEnhanced = 1
set completeopt=menuone,preview,longest
"set dictionary=~/.vim/spell/ru_RU_yo.utf8.dic
"}}}

" PROJECTS {{{
if filereadable(expand('~/.vim/projects.vim'))
	source ~/.vim/projects.vim
endif
" }}}

" MAPPINGS {{{
" GENERAL {{{
"Tab in visual mode
xmap <Tab> >gv
xmap <S-Tab> <gv
" key mapping for tab navigation
nmap <Tab> gt
nmap <S-Tab> gT

" clear search highlight
nmap <silent> <leader>h :silent :nohlsearch<CR>


" Paste mode
set pastetoggle=<F2>
" Перенос строки без разбития слов
map <F4> <ESC>80\|gEl<INSERT><CR><ESC>
" Обновление .vimrc.mine
map <F5> <ESC>: source ~/.vim/.vimrc.mine<CR>
" Fast editing of the .vimrc
map <Leader>v :e! ~/.vim/.vimrc.mine<CR>
map <Leader>vp :e ~/.vim/projects.vim<CR>
"}}}

" filetype setting
map <Leader>fd <ESC>:set filetype=htmldjango<CR>
map <Leader>fp <ESC>:set filetype=python<CR>
" use htmldjango instead of html
autocmd FileType html set filetype=htmldjango

" WINDOWS {{{
"Перемещения по окнам
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
"imap <c-j> <ESC><c-w>j
"imap <c-k> <ESC><c-w>k
imap <c-l> <ESC><c-w>l
imap <c-h> <ESC><c-w>h
" Zoom in/out
nmap <c-o> <c-w>o
imap <c-o> <ESC><c-w>o
" Close window
map <c-c> <c-w>c
imap <c-c> <ESC><c-w>c
" Переход между буферами
nmap <space> <c-^>
"}}}

" BufExplorer
let g:bufExplorerShowTabBuffer=1
let g:bufExplorerShowRelativePath=1

" Django {{{
map <Leader>msd <ESC>:Dmanage syncdb<CR>
map <Leader>msm <ESC>:exec ":Dmanage schemamigration " . lighthouse#getdjangoapp() . " --auto"<CR>
map <Leader>mcs <ESC>:exec ":Dmanage convert_to_south " . lighthouse#getdjangoapp()<CR>
map <Leader>msme <ESC>:exec ":Dmanage schemamigration " . lighthouse#getdjangoapp() . " --empty"<CR>
map <Leader>mm <ESC>:exec ":Dmanage migrate " . lighthouse#getdjangoapp()<CR>
"map <Leader>mt <ESC>:exec ":Dmanage test " . lighthouse#getdjangoapp()<CR>
"}}}

"py-test-runner
map <Leader>mt <ESC>:python RunUnitTestsUnderCursor()<CR>

" Conque
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_CloseOnEnd = 1
map <Leader>ms <ESC>:ConqueTermSplit python manage.py shell<CR>
map <Leader>md <ESC>:ConqueTermSplit python manage.py dbshell<CR>
map <Leader>ba <ESC>:ConqueTermSplit bash<CR>

" CommandT
let g:CommandTMaxHeight = 25
let g:CommandTMatchWindowReverse = 1
let g:CommandTMaxFiles = 50000
"очистка буфера
nmap <Leader>tf <ESC>:CommandTFlush<CR>
" own map for <Leader>t
nmap <Leader>ct :CommandT<CR>
nmap <silent> <Leader>t <ESC>:call lighthouse#commandt_filesearch()<CR>

" поиск файлов в workspace
if exists("workspace")
	execute "nmap <Leader><Leader>t <ESC>:CommandT  ".workspace."<CR>"
endif

" vim-surround {{{
let g:surround_{char2nr("b")} = "{% block\1 \r..*\r &\1 %}\r{% endblock %}"
let g:surround_{char2nr("i")} = "{% if\1 \r..*\r &\1 %}\r{% endif %}"
let g:surround_{char2nr("w")} = "{% with\1 \r..*\r &\1 %}\r{% endwith %}"
let g:surround_{char2nr("c")} = "{% comment\1 \r..*\r &\1 %}\r{% endcomment %}"
let g:surround_{char2nr("f")} = "{% for\1 \r..*\r &\1 %}\r{% endfor %}"
" }}}

" Ack, поиск текста
nmap <silent> <Leader>a <ESC>:call lighthouse#ack_grep()<CR>
if exists("workspace")
	" поиск текста в workspace
	execute "nmap <Leader><Leader>a <ESC>:Ack!  ".workspace."<Home><right><right><right><right><right>"
endif

" CTAGS
set tags+=~/mytags
" переход по тегу в стиле tjump
nmap g] g<C-]>

"TTags
let g:ttags_shorten_path = 0

"список TODO-меток
map <Leader>td <Plug>TaskList

" NERDTree
let g:NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" fugitive, git команды
map <Leader>gs <ESC>:Gstatus<CR>
map <Leader>gsd <ESC>:Git svn dcommit<CR>
map <Leader>gsp <ESC>:Git svn dcommit <bar> :Git push<CR>
map <Leader>gd <ESC>:Gdiff<CR>
map <Leader>gc <ESC>:Gcommit<CR>
map <Leader>gca <ESC>:Gcommit -a<CR>
map <Leader>gp <ESC>:Git push<CR>
map <Leader>gk <ESC>:!gitk<CR>
"Gitv
map <Leader>gv <ESC>:Gitv<CR>
let g:Gitv_WipeAllOnClose = 1

" Ropevim {{{
" Rope AutoComplete
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>
"let ropevim_codeassist_maxfixes=10
"let ropevim_guess_project=1
let ropevim_vim_completion=1
let ropevim_enable_autoimport=1
let ropevim_extended_complete=1
let ropevim_codeassist_maxfixes=10
"let g:ropevim_autoimport_modules = ["os.*","traceback","django.*"]

nmap <Leader>roi <ESC>:RopeOrganizeImports<CR>1<CR>
nmap <Leader>rai <ESC>:RopeAutoImport<CR>
nmap <Leader>rcp <ESC>:RopeCreatePackage<CR>
nmap <Leader>rcm <ESC>:RopeCreateModule<CR>
nmap <Leader>rj :RopeGotoDefinition<CR>
nmap <Leader>rr :RopeRename<CR>
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>
"}}}

" VARIOUS {{{
" PEP8
let g:pep8_map='<Leader>8'
let g:pyflakes_use_quickfix = 0
map <Leader>u :GundoToggle<CR>
"tagbar
map <Leader>b :TagbarToggle<CR>
"let g:tagbar_singleclick = 1
" snipMate
let g:snips_trigger_key = "<c-j>"
let g:snips_trigger_key_backwards = "<c-k>"
"}}}
"}}}
" vim: set foldmethod=marker:
