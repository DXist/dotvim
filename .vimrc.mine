" GENERAL {{{1
if !exists('s:loaded_my_vimrc')
	set nocompatible               " be iMproved
	filetype off                   " required!

	set rtp+=~/.vim/bundle/vundle/
	call vundle#rc()

	" let Vundle manage Vundle
	" required!
	Bundle 'gmarik/vundle'

	" My Bundles here:
	"
	" original repos on github
	Bundle 'tpope/vim-fugitive'
	" syntax files
	Bundle 'tpope/vim-git'
	Bundle 'gregsexton/gitv'
	Bundle 'tpope/vim-surround'
	Bundle 'tpope/vim-repeat'
	Bundle 'tpope/vim-commentary'
	Bundle 'jmcantrell/vim-virtualenv'
	Bundle 'mileszs/ack.vim.git'
	Bundle 'altercation/vim-colors-solarized'
	Bundle 'itspriddle/vim-javascript-indent'
	Bundle 'scrooloose/syntastic'
	Bundle 'bkad/CamelCaseMotion'
	Bundle 'Lokaltog/vim-easymotion'
	Bundle 'majutsushi/tagbar'
	Bundle 'Raimondi/delimitMate'
	Bundle 'rainerborene/vim-pony'
	Bundle 'Valloric/YouCompleteMe'
	Bundle 'michaeljsmith/vim-indent-object'
	Bundle 'xolox/vim-misc'
	Bundle 'xolox/vim-session'
	Bundle 'kien/ctrlp.vim'
	Bundle 'thinca/vim-template'
	Bundle 'me-vlad/spellfiles.vim'
	Bundle 'dbarsam/vim-bufkill'
	Bundle 'SirVer/ultisnips'
	Bundle 'benatkin/vim-move-between-tabs'

	filetype on                          " try to detect filetypes
	filetype plugin indent on    " enable loading indent file for filetype
	syntax on
	" enable modeline
	set modeline
	" allow perdirectory rc-files
	set exrc
	set secure
	" автообновление настроек
	autocmd BufWritePost .vimrc.mine source ~/.vim/.vimrc.mine
	" автообновление проектов
	autocmd BufWritePost projects.vim source ~/.vim/projects.vim
	let s:loaded_my_vimrc = 1
endif

set history=1000
"}}}

" VIM user interface {{{1
" statusline по умолчанию
if &statusline == ''
	set statusline=%<%f\ %y\ %h%m%r%=%-14.(%l,%c%V%)\ %P
endif

" статус - 2 строка снизу
set laststatus=2

set ttyfast
if v:version>=703
	set relativenumber
endif
set showcmd

" Enable mouse usage (all modes)
set mouse=a
" меняем заголовок окна на titlestring
set title
" nocursorline in insert mode
set cursorline
au InsertEnter * set nocursorline
au InsertLeave * set cursorline
set visualbell              " mute error bell"
set scrolloff=4             " min 4 symbols bellow cursor"
set linebreak               " break lines by words"
" новое окно помещаем справа от текущего
set splitright
set previewheight=25

" SEARCH
" игнорируем case, если шаблон в нижнем регистре
set ignorecase
set smartcase
" ищем в процессе набора
set incsearch
" подсветка найденных соответствий
set hlsearch
set showmatch               " Show matching brackets

" wildmenu
set wildmenu
set wildignore=*.o,.git,*.swp,*.swo,*~,*.pyc,build,*.egg,*.egg/*,*.egg-info/*,dist,deb_dist,pyshared,.tox
set wildcharm=<C-Z>
source $VIMRUNTIME/menu.vim

"}}}

" COLORS {{{1
" тёмный фон
set bg=dark
silent! colorscheme solarized
let g:solarized_termtrans =1
" переключение background
if exists("togglebg")
	call togglebg#map("<F6>")
endif
" используем специальную палитру для solarized
set t_Co=16
"let g:solarized_termcolors=256
"Easy motion
let g:EasyMotion_do_shade = 0

"Подсвечиваем все что можно подсвечивать
let python_highlight_all = 1
" Highlight leading tabs
match SpecialKey /^\t\+/
"}}}

" FILES, BACKUPS, BUFFERS, SAVING {{{1
" keep a backup file
set backup
" бэкапы и swap-файлы храним во временной директории
set backupdir=~/.vim/backup/,/tmp
set directory=~/.vim/tmp/,/tmp

set hidden					" hide buffers when they are abandoned
set autoread				" auto reload externally changed files
" Save current open file when window focus is lost
"au FocusLost * if &modifiable && &modified | write | endif

function! RemoveTrailingWhitespace()
	if &ft != "diff"
		let b:curcol = col(".")
		let b:curline = line(".")
		" отсекаем неэкранированные пробелы на конце при сохранении
		silent! %s/\(\\\)\@<!\s\+$//e
		" пустые строки в конце файла
		"silent! %s/\(\s*\n\)\+\%$//
		call cursor(b:curline, b:curcol)
	endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()
"}}}

" LOCALIZATION {{{1
" удобно при наборе русских текстов
set keymap=russian-jcukenwin
if v:version>=703 || (v:version == 702 && has("patch109"))
	" нужна поддержка unicode langmap
	set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>,Ё~
endif
set spelllang=en,ru
set langmenu=none            " Always use english menu
"Кодировки файлов
set fileencodings=utf-8,cp1251,koi8-r,cp866
"lmap is off and IM is off
set iminsert=0               " English by default"
set imsearch=0
"}}}

" TEXT EDITING {{{1
set textwidth=0
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set smarttab
set tabstop=4
set shiftwidth=4
set shiftround
set softtabstop=-1 " the same value as shiftwidth
set autoindent              " copy indent from previous line
" замена всех соответствий
set gdefault

" formatting
map Q gq

" Undo
if has('persistent_undo')
	set undofile				" enable persistent undo
	set undodir=/tmp/vimundo    " store undofiles in a tmp dir
endif

"diff
set diffopt+=vertical
nmap dgl :diffget /2<CR>:diffupdate<CR>
nmap dgr :diffget /3<CR>:diffupdate<CR>

" для различения уровня отступов
set listchars=tab:\ \ ,trail:·,extends:⋯,precedes:⋯,nbsp:~
"set list listchars=tab:»·,trail:·
""}}}

" FOLDING - сворачивание {{{1
if has('folding')
	set foldcolumn=3
	set fdm=indent
	set fdn=2
	set fml=15
	set foldopen+=insert
endif
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.  Protect against
" screwing up folding when switching between windows.
"autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
"autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
"}}}
" COMPLETION {{{1
" учитываем case при дополнении
set infercase
" дополнение тега и имени файла
inoremap ^] ^X^]
inoremap ^F ^X^F

set completeopt=menuone,longest ",preview

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"YouCompleteMe conflicts with delimitMate]
let g:ycm_key_list_previous_completion = ['<Up>']
"}}}

" PROJECTS {{{1
if filereadable(expand('~/.vim/projects.vim'))
	source ~/.vim/projects.vim
endif
" }}}

" MAPPINGS {{{1
" GENERAL {{{2
let mapleader = ","

" Fast saving
nmap <leader>s :w<cr>
nmap <leader>x :silent w !sudo tee %<cr>:e!<cr>
"Tab in visual mode
xmap <Tab> >gv
xmap <S-Tab> <gv
" key mapping for tab navigation
nmap <C-n> gt
nmap <C-p> gT
" key mapping for keymap switch
"imap <Tab> <C-^>

" clear search highlight
nmap <silent> <leader>h :silent :nohlsearch<CR>
" Command mode {{{
" ------------

	" Allow command line editing like emacs
	cnoremap <C-A>      <Home>
	cnoremap <C-B>      <Left>
	cnoremap <C-F>      <Right>

" }}}
" Paste mode
set pastetoggle=<F2>
map <F3> :set nowrap!<CR>
" Подсветка подозрительных аналогов ascii символов
map <F4> /[соех]<CR>
" Перенос строки без разбития аргументов
"map <F4> <ESC>80\|T,s<CR><ESC>
" Обновление .vimrc.mine
map <F5> <ESC>: source ~/.vim/.vimrc.mine<CR>
" Fast editing of the .vimrc
map <Leader>v :e! ~/.vim/.vimrc.mine<CR>
map <Leader>vp :e ~/.vim/projects.vim<CR>
"}}}

" filetype setting
map <Leader>fd <ESC>:set filetype=htmldjango<CR>
map <Leader>fp <ESC>:set filetype=python<CR>
" use htmldjango instead of html
autocmd FileType html set filetype=htmldjango

" WINDOWS {{{2
" Window movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Close window
map <c-c> <c-w>c
" Switch to alternate buffer
nmap <space> <c-^>
set switchbuf=usetab
"}}}

" PLUGINS {{{2
" Session.vim
let g:session_autosave = "yes"
" expand sym links
let g:session_directory = resolve(expand("~/.vim/sessions"))

" Django {{{
map <Leader>msd <ESC>:Dmanage syncdb<CR>
map <Leader>msm <ESC>:exec ":Dmanage schemamigration " . lighthouse#getdjangoapp() . " --auto"<CR>
map <Leader>mcs <ESC>:exec ":Dmanage convert_to_south " . lighthouse#getdjangoapp()<CR>
map <Leader>msme <ESC>:exec ":Dmanage schemamigration " . lighthouse#getdjangoapp() . " --empty"<CR>
map <Leader>mm <ESC>:exec ":Dmanage migrate " . lighthouse#getdjangoapp()<CR>
"map <Leader>mt <ESC>:exec ":Dmanage test " . lighthouse#getdjangoapp()<CR>
"}}}

"py-test-runner
map <Leader>mt <ESC>:python RunUnitTestsUnderCursor()<CR>
map <Leader>mr <ESC>:python run_test()<CR>

" Brakepoint
map <Leader>n oimport ipdb; ipdb.set_trace()  # FIXME: brakepoint<ESC>
map <Leader>p oimport pprint; pprint.pprint(


" Ctrlp
let g:ctrlp_map = '<Nul>'
let g:ctrlp_extensions = ['buffertag', 'line']
let g:ctrlp_mruf_relative = 1
let g:ctrlp_max_height = 25
let g:ctrlp_show_hidden = 1
nmap <Leader>l <ESC>:CtrlPLine<CR>
nmap <Leader>r <ESC>:CtrlPBufTagAll<CR>
nmap <silent> <Leader>t <ESC>:call lighthouse#filesearch()<CR>

" поиск файлов в workspace
" if exists("workspace")
" 	execute "nmap <Leader><Leader>t <ESC>:".lighthouse_search_cmd."  ".workspace."<CR>"
" endif

" vim-surround {{{
let g:surround_{char2nr("b")} = "{% block\1 \r..*\r &\1 %}\r{% endblock %}"
let g:surround_{char2nr("i")} = "{% if\1 \r..*\r &\1 %}\r{% endif %}"
let g:surround_{char2nr("w")} = "{% with\1 \r..*\r &\1 %}\r{% endwith %}"
let g:surround_{char2nr("c")} = "{% comment\1 \r..*\r &\1 %}\r{% endcomment %}"
let g:surround_{char2nr("f")} = "{% for\1 \r..*\r &\1 %}\r{% endfor %}"
let g:surround_{char2nr("s")} = "{% static \"\r\" %}"
" }}}

" Ack, поиск текста
nmap <silent> <Leader>a <ESC>:call lighthouse#ack_grep()<CR>
if exists("workspace")
	" поиск текста в workspace
	execute "nmap <Leader><Leader>a <ESC>:Ack!  ".workspace."<Home><right><right><right><right><right>"
endif

" CTAGS
if exists("$VIRTUAL_ENV")
	set tags^=$VIRTUAL_ENV/.tags
endif
" переход по тегу в стиле tjump
nmap g] g<C-]>
nmap g} <c-W>g}

" fugitive, git команды
map <Leader>gs <ESC>:Gstatus<CR>
map <Leader>gsr <ESC>:Git stash  <bar> :Git svn rebase <bar> :Git stash pop<CR>
map <Leader>gsd <ESC>:Git stash  <bar> :Git svn dcommit <bar> :Git stash pop<CR>
map <Leader>gsp <ESC>:Git svn dcommit <bar> :Git push<CR>
map <Leader>gd <ESC>:Gdiff<CR>
map <Leader>gc <ESC>:Gcommit<CR>
map <Leader>gca <ESC>:Gcommit -a<CR>
map <Leader>gp <ESC>:Git push<CR>
map <Leader>gk <ESC>:!gitk<CR>
" Git fugitive menu
noremap <Leader>g :emenu Git.<C-Z>
menu Git.Status :Gstatus<CR>
menu Git.Diff :Gdiff<CR>
menu Git.Commit :Gcommit %<CR>
menu Git.Checkout :Gread<CR>
menu Git.Remove :Gremove<CR>
menu Git.Move :Gmove<CR>
menu Git.Log :Glog<CR>
menu Git.Blame :Gblame<CR>
"Gitv
map <Leader>gv <ESC>:Gitv<CR>
let g:Gitv_WipeAllOnClose = 1
let g:Gitv_DoNotMapCtrlKey = 0

let g:virtualenv_auto_activate = 1
let g:virtualenv_stl_format = '(%n)'

" Syntastic

let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol='✗'
let g:syntastic_warning_symbol='➤'
let g:syntastic_style_warning_symbol='➤'
let g:syntastic_python_checkers=['pylama']
let g:syntastic_python_pylama_args='--linters pylint,pyflakes,pep8,pep257,mccabe --options=~/.pylama.ini'
let g:syntastic_python_flake8_args='--max-complexity=10'

"YcmComplteter

nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>jf :YcmCompleter GoToDeclaration<CR>

" VARIOUS {{{2
"tagbar
map <Leader><space> :TagbarToggle<CR>
"let g:tagbar_singleclick = 1
" snipMate
let g:snips_trigger_key = "<c-j>"
let g:snips_trigger_key_backwards = "<c-k>"
" delimitMate
let g:delimitMate_nesting_quotes = ['"']
au FileType html,htmldjango let b:delimitMate_matchpairs = "(:),[:],{:}"
"let g:delimitMate_smart_quotes = 0
"let g:delimitMate_quotes = '"'
" Bufkill
let g:BufKillCreateMappings = 0
" UltiSnips
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsListSnippets = "<Leader>u"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:ultisnips_python_style='sphinx'


"}}}
"}}}
" Local settings
" ================
if filereadable($HOME . "/.vimrc.local")
    source $HOME/.vimrc.local
endif
" vim: set foldmethod=marker:
