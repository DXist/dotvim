" GENERAL {{{
set nocompatible
filetype on                          " try to detect filetypes
filetype plugin indent on    " enable loading indent file for filetype
" enable modeline
set modeline
" автообновление настроек
autocmd BufWritePost .vimrc.mine source ~/.vim/.vimrc.mine
"}}}

" VIM user interface {{{
" statusline
set statusline=
if exists("*GetCurrentProject")
	set statusline+=Project:\ %{GetCurrentProject()}\ 
endif

if exists("*fugitive#statusline")
	set statusline+=%{fugitive#statusline()}\ 
endif

set statusline+=%<%f\ %y\ %h%m%r%=%-14.(%l,%c%V%)\ %P

" статус - 2 строка снизу
set laststatus=2

" Enable mouse usage (all modes)
set mouse=a
" меняем заголовок окна на titlestring
set title
set cursorline
" новое окно помещаем справа от текущего
set splitright

" SEARCH
" игнорируем case, если шаблон в нижнем регистре
set ignorecase
set smartcase
" ищем в процессе набора
set incsearch
" подсветка найденных соответствий
set hlsearch

set wildmenu wildmode=list:longest
set wildignore=.o,.git,*.swp,*~
"}}}

" COLORS {{{
syntax on                           " syntax highlighing
" тёмный фон
set bg=dark
silent! colorscheme solarized
let g:solarized_termtrans =1
" переключение background
if exists("togglebg")
	call togglebg#map("<F6>")
endif
" используем специальную палитру для solarized
set t_Co=16
"let g:solarized_termcolors=256

"Подсвечиваем все что можно подсвечивать
let python_highlight_all = 1
"}}}

" FILES, BACKUPS, SAVING {{{
" keep a backup file
set backup
" бэкапы и swap-файлы храним во временной директории
set backupdir=~/.vim/backup/,/tmp
set directory=~/.vim/tmp/,/tmp
" сохраняем буферы между сессиями
set viminfo+=%
" нам нужно сохранить undo tree при переключении буферов
set hidden
" отсекаем неэкранированные пробелы на конце при сохранении
autocmd BufWritePre * :%s/\(\\\)\@<!\s\+$//e
"}}}

" LOCALIZATION {{{
" удобно при наборе русских текстов
set keymap=russian-jcukenwin
"проблема с бэкслешем ,
"set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\,,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>,./
set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>
" по умолчанию - латинская раскладка
set iminsert=0
" по умолчанию - латинская раскладка при поиске
set imsearch=0
"}}}

" TEXT EDITING {{{
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4 "4 пробела в табе
"Автоотступ
set autoindent

"diff
set diffopt+=vertical

" для различения уровня отступов
set list listchars=tab:\ \ ,trail:·
"set list listchars=tab:»·,trail:·
""}}}

" FOLDING - сворачивание {{{
set foldcolumn=3
set fdm=indent
set fdn=2
set fml=7
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.  Protect against
" screwing up folding when switching between windows.
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif
"}}}

" COMPLETION {{{
"Настройка omnicomletion для Python (а так же для js, html и css)
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
let g:SuperTabDefaultCompletionType = "context"
function! MyTagContext()
return "\<c-x>\<c-]>"
" no return will result in the evaluation of the next
" configured context
endfunction
let g:SuperTabCompletionContexts = ['MyTagContext', 's:ContextText', 's:ContextDiscover']
set completeopt=menuone,longest,preview
"}}}

" MAPPINGS {{{
" GENERAL {{{
"Tab in visual mode
vmap <Tab> >gv
vmap <S-Tab> <gv

" Paste mode
set pastetoggle=<F2>
" Перенос строки без разбития слов
map <F4> <ESC>80\|gEl<INSERT><CR><ESC>
" Обновление .vimrc.mine
map <F5> <ESC>: source ~/.vim/.vimrc.mine<CR>
" Fast editing of the .vimrc
map <Leader>v :e! ~/.vim/.vimrc.mine<CR>
" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
"}}}

" WINDOWS {{{
"Перемещения по окнам
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
imap <c-j> <ESC><c-w>j
imap <c-k> <ESC><c-w>k
imap <c-l> <ESC><c-w>l
imap <c-h> <ESC><c-w>h
" Переход между буферами
nmap <space> <c-^>
"}}}

" SHELL {{{
map <Leader>ms <ESC>:!./manage.py schemamigration $DJANGO_APP --auto<CR>
map <Leader>mm <ESC>:!./manage.py migrate $DJANGO_APP <CR>
map <Leader>mt <ESC>:!./manage.py test $DJANGO_APP <CR>
"}}}

" Conque
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_CloseOnEnd = 1

" CommandT
let g:CommandTMaxHeight = 25
let g:CommandTMatchWindowReverse = 1
let g:CommandTMaxFiles = 50000
" поиск файлов в workspace
if exists("workspace")
	execute "nmap <Leader><Leader>t <ESC>:CommandT  ".workspace."<CR>"
endif

" Ack, поиск текста
nmap <Leader>a <Esc>:Ack!
if exists("workspace")
	" поиск текста в workspace
	execute "nmap <Leader><Leader>a <ESC>:Ack!".workspace."<Home><right><right><right><right><right>"
endif

" CTAGS
set tags+=~/mytags
" переход по тегу в стиле tjump
nmap g] g<C-]>

"список TODO-меток
map <Leader>td <Plug>TaskList
map <Leader>dt :set makeprg=python\ manage.py\ test\|:call MakeGreen()<CR>

" miniBufExpl
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
let g:miniBufExplUseSingleClick = 1

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
"map <Leader>n :NERDTreeToggle<CR>

" fugitive, git команды
map <Leader>gs :Gstatus<CR>
map <Leader>gc :Gcommit<space>
map <Leader>gp :Git push<CR>
map <Leader>gk :!gitk<CR>

" Ropevim {{{
" Rope AutoComplete
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>
"let ropevim_codeassist_maxfixes=10
"let ropevim_guess_project=1
let ropevim_vim_completion=1
let ropevim_enable_autoimport=1
let ropevim_extended_complete=1
let ropevim_codeassist_maxfixes=10
"let g:ropevim_autoimport_modules = ["os.*","traceback","django.*"]

nmap <Leader>roi <ESC>:RopeOrganizeImports<CR>1<CR>
nmap <Leader>rai <ESC>:RopeAutoImport<CR>
nmap <Leader>rcp <ESC>:RopeCreatePackage<CR>
nmap <Leader>rcm <ESC>:RopeCreateModule<CR>
nmap <Leader>rj :RopeGotoDefinition<CR>
nmap <Leader>rr :RopeRename<CR>
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>
"}}}

"light house
autocmd VimEnter * call SwitchToProject()
autocmd TabEnter * execute ":UMiniBufExplorer"
"map <LEADER>W :TMiniBufExplorerCloseAllOthers<CR>
map <Leader>n :call ToggleBetweenNERDTreeAndBufExplorer()<CR>
"map <C-!> :call CloseNERDTreeAndBufExplorer()<CR>
map gt :call GTTabMove('next')<CR>
map gT :call GTTabMove('previous')<CR>
function! GTTabMove(direction)
  if IsBufExplorerOpen() && tabpagenr('$') == 1
    if a:direction == 'next'
      call NextBuffer()
    else
      call PreviousBuffer()
    endif
  elseif a:direction == 'next'
    normal! gt
  else
    normal! gT
  endif

endfunction


" VARIOUS {{{
" PEP8
let g:pep8_map='<Leader>8'
"let g:pyflakes_use_quickfix = 0
map <Leader>u :GundoToggle<CR>
map <Leader>p :TlistToggle<CR>
"}}}
"}}}
" vim: set foldmethod=marker:
