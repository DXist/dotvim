" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set backup		" keep a backup file
" сохраняем буферы между сессиями
set viminfo+=%

set statusline=%<%f\ %y\ %{fugitive#statusline()}\ %h%m%r%=%-14.(%l,%c%V%)\ %P
" статус - 2 строка снизу
set laststatus=2
syntax on                           " syntax highlighing
" подсветка найденных соответсвий
set hlsearch
filetype on                          " try to detect filetypes
filetype plugin indent on    " enable loading indent file for filetype
"Подсвечиваем все что можно подсвечивать
"let python_highlight_all = 1
"Включаем 256 цветов в терминале, мы ведь работаем из иксов?
"Нужно во многих терминалах, например в gnome-terminal
set t_Co=256

set mouse=a		" Enable mouse usage (all modes)
" тёмный фон
set bg=dark

" для различения уровня отступов
"set list lcs=tab:\|\
set list listchars=tab:»·,trail:·
" отсекаем пробелы на конце
autocmd BufWritePre * :%s/\s\+$//e
" удобно при наборе русских текстов
set keymap=russian-jcukenwin
"проблема с бэкслешем ,
"set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\,,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>,./
set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,ю.,ё',ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>
" по умолчанию - латинская раскладка
set iminsert=0
" по умолчанию - латинская раскладка при поиске
set imsearch=0

" сворачивание
set foldcolumn=3
set fdm=indent
set fdn=2
set fml=7
"ctags
set tags+=~/mytags

"Настройка omnicomletion для Python (а так же для js, html и css)
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
let g:SuperTabDefaultCompletionType = "context"
function! MyTagContext()
    return "\<c-x>\<c-]>"
  " no return will result in the evaluation of the next
  " configured context
endfunction
let g:SuperTabCompletionContexts = ['MyTagContext', 's:ContextText', 's:ContextDiscover']

set completeopt=menuone,longest,preview

set tabstop=4
set shiftwidth=4
set smarttab
set noexpandtab "Ставим табы по умолчанию
set softtabstop=4 "4 пробела в табе
"Автоотступ
set autoindent

" Showing red border at column 77 and 78
set cc=79
hi ColorColumn ctermbg=darkgrey guibg=darkgrey
set pastetoggle=<F2>
nmap <F4> <ESC>80\|gEl<INSERT><CR><ESC>
map <F5> <ESC>: source ~/.vimrc<CR>

" поиск файлов в workspace
let g:CommandTMaxHeight = 25
let g:CommandTMatchWindowReverse = 1
execute "nmap <leader><leader>t <ESC>:CommandT  ".workspace."<CR>"
" поиск текста
nmap <leader>a <Esc>:Ack!
" поиск текста в workspace
execute "nmap <leader><leader>a <ESC>:Ack!".workspace."<Home><right><right><right><right><right>"

" переход по тегу
nmap <CR> g<C-]>
"список TODO-меток
map <leader>td <Plug>TaskList
map <leader>dt :set makeprg=python\ manage.py\ test\|:call MakeGreen()<CR>
"Перемещения по окнам
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

map <leader>g :GundoToggle<CR>
map <leader>n :NERDTreeToggle<CR>
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>
map <leader>p :TlistToggle<CR>
"django команды
map <leader>ms <ESC>:!./manage.py schemamigration $DJANGO_APP --auto<CR>
map <leader>mm <ESC>:!./manage.py migrate $DJANGO_APP <CR>
map <leader>mt <ESC>:!./manage.py test $DJANGO_APP <CR>

let g:pep8_map='<leader>8'
"let g:pyflakes_use_quickfix = 0
"miniBuf
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
" Rope AutoComplete
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>
"let ropevim_codeassist_maxfixes=10
"let ropevim_guess_project=1
let ropevim_vim_completion=1
let ropevim_enable_autoimport=1
let ropevim_extended_complete=1
let ropevim_codeassist_maxfixes=10
let g:ropevim_autoimport_modules = ["os.*","traceback","django.*"]
" Rope AutoImport and OrganizeImport
nnoremap <leader>roi <ESC>:RopeOrganizeImports<CR>1<CR>
nnoremap <leader>rai <ESC>:RopeAutoImport<CR>
nmap <leader>rcp <ESC>:RopeCreatePackage<CR>
nmap <leader>rcm <ESC>:RopeCreateModule<CR>

" Rope AutoComplete
let ropevim_vim_completion = 1
let ropevim_extended_complete = 1
let g:ropevim_autoimport_modules = ["os.*","traceback","django.*","lxml.etree","lxml.*"]
imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>

